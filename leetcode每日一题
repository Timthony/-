leetcode 48. 旋转图像    
解：
class Solution {
public:
    void rotate(vector<vector<int>>& matrix) {
         int n = int(matrix.size());//n*n的矩阵
        int temp;
        //先沿着斜率为-1的对角线翻转
        for (int i = 0; i < n; ++i)
        {
            for (int j = n-1; j > i; j--)
            {
                int temp = matrix[i][j];
                matrix[i][j] = matrix[j][i];
                matrix[j][i] = temp;
            }
        }
        
        //再左右翻转
        for (int i = 0; i < n; i++)
        {
            for (int j = 0; j < n/2; j++)
            {
                int temp2 = matrix[i][j];
                matrix[i][j] = matrix[i][n-1-j];
                matrix[i][n-1-j] = temp2;
            }
        }
    }
};


leetcode1. 两数之和    
解：    
class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        vector<int> result;
        for(int i =0;i< nums.size();i++)
        {
            for(int j = i+1;j<nums.size();j++)
            {
                if(nums[i]+nums[j] == target)
                {
                    result.push_back(i);
                    result.push_back(j);
                }   
            } 
        }
        return result;
        
        
    }
};

867. 转置矩阵    
class Solution {
public:
    vector<vector<int>> transpose(vector<vector<int>>& A) {
        int r = A.size();
        int c = A[0].size();
        vector<vector<int>> A_T(c);
        for (int i = 0; i < c; i++)
        {
            A_T[i].resize(r);
        }
        for (int i = 0; i < r; i++)//行数
        {
            for (int j = 0; j < c; j++)
            {
                A_T[j][i] = A[i][j];
            }
        }
        return A_T;
    }
};

26. 删除排序数组中的重复项    
class Solution {
public:
    int removeDuplicates(vector<int>& nums) {
        if(nums.size() == 0)
        {
            return 0;
        }
        int i = 0;
        int size = nums.size();//存放数组的原始长度
        for(int j = 0;j < size;j++)
        {
            if(nums[i] != nums[j])
            {
                i++;
                nums[i] = nums[j];
            }
        }
        int l = i+1;
        return l;      
    }
};

21. 合并两个有序链表    
class Solution {
public:
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
        if(l1 == NULL) return l2;
        if(l2 == NULL) return l1;
        ListNode temp_head(0);
        ListNode *ptr = &temp_head;
        while(l1&&l2)
        {
            if(l1->val < l2->val)
            {
                ptr->next = l1;
                l1 = l1->next;
            }
            else
            {
                ptr->next = l2;
                l2 = l2->next;
            }
            ptr = ptr->next;
        }
        if(l1)
        {
            ptr->next = l1;
        }
        if(l2)
        {
            ptr->next = l2;
        }
        return temp_head.next;
    }
};

字符串匹配

int BF(string str1, string str2)
{
    for (int i = 0; i < str1.size(); i++)
    {
        for (int j = 0; j < str2.size(); j++)
        {
            if(str1[i+j] != str2[j])
            {
                break;
            }
            if(j == str2.size()-1)
            {
                cout<<i<<endl;
                return 0;
            }
        }
    }
    cout<<-1<<endl;
    return -1;
}

