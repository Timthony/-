/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    bool isSameTree(TreeNode* p, TreeNode* q) {
        if(p==nullptr && q==nullptr)   return true;
        return rec(p, q);
    }
    
    
    bool rec(TreeNode* p1, TreeNode* p2)
    {
        if(p1==nullptr && p2==nullptr)
        {
            return true;
        }
        if(p1==nullptr || p2==nullptr)
        {
            return false;
        }
        if(p1->val != p2->val)
        {
            return false;
        }
        return (rec(p1->left, p2->left) && rec(p1->right, p2->right));
        
    }
    
};


//非递归实现，使用队列来辅助
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
//     bool isSameTree(TreeNode* p, TreeNode* q) {
//         if(p==nullptr && q==nullptr)   return true;
//         return rec(p, q);
//     }
    
    
//     bool rec(TreeNode* p1, TreeNode* p2)
//     {
//         if(p1==nullptr && p2==nullptr)
//         {
//             return true;
//         }
//         if(p1==nullptr || p2==nullptr)
//         {
//             return false;
//         }
//         if(p1->val != p2->val)
//         {
//             return false;
//         }
//         return (rec(p1->left, p2->left) && rec(p1->right, p2->right));
        
//     }
    bool isSameTree(TreeNode* p, TreeNode* q)
    {
        //非递归方式
        if(p==nullptr && q==nullptr)  return true;
        //使用队列辅助判断
        queue<TreeNode*> lefttree, righttree;
        
        TreeNode* l(0);
        TreeNode* r(0);
        
        lefttree.push(p);
        righttree.push(q);
        
        while(!lefttree.empty() && !righttree.empty())
        {
            l = lefttree.front();
            r = righttree.front();
            lefttree.pop();
            righttree.pop();
            
            if(!l&&!r)  continue;
            else if(!l||!r)  return false;
            else if(l->val != r->val)  return false;
            
            
            lefttree.push(l->left);
            lefttree.push(l->right);
            
            righttree.push(r->left);
            righttree.push(r->right);

        }
        return true;

    }
    
};
