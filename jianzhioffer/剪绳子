//动态规划法求解
int maxProduct(int length)
{
    if(length < 2)
    {
        return 0;
    }
    if(length == 2)
    {
        return 1;
    }
    if(length == 3)
    {
        return 2;
    }
    int *products = new int[length+1];//子问题的最优解集合
    product[0]=0;
    product[1]=1;
    product[2]=2;
    product[3]=3;
    //f(n) = max(f(i)*f(length-i)),0<i<length
    int max = 0;
    for(int i=4;i<=length;i++)
    {
        max = 0;
        for(int j=1;j<=i/2;j++)
        {
            int  product=products[j]*products[i-j];
            if(max < product)
            {
                max = product;
            }
            products[i] = max;
        }
    }
    max = products[length];
    delete[] products;
    return max;
}


//贪婪算法
//尽可能都分成3为一份，除了长度是4的情况，这样最大
//6，3，3
//8, 3,3,2
//7，3，2，2
int maxProduct(int length)
{
    if(length < 2)
    {
        return 0;
    }
    if(length == 2)
    {
        return 1;
    }
    if(length == 3)
    {
        return 2;
    }
    int timesOf3 = length/3;
    //当绳长为4时，分为2*2
    if(length - timesOf3*3 == 1)
    {
        timesOf3--;
    }
    int timesOf2 = (length - timesOf3*3)/2;
    
    return (int)(pow(3, timesOf3) * (int)(pow(2, timesOf2)));

}

