class Solution {
public:
     int  NumberOf1(int n) {
         //最优解：将n和n-1进行与运算，n-1的值就是将n的最后一个1变为0，然后1右边的0变为1，比如10100 减去1，变为10011，进行与运算之后，n的最后一个1变为0，1右边的0变为1，
         //距离n为0又近了一步，没执行一次n的最右边的1就会变为0一次，执行count次，n=0
         /*
         int count = 0;
         while(n != 0)
         {
             count++;
             n = n & (n-1);
         }
         return count;
         */
         //常规解法
         //对n的每一位进行一次与操作，看结果，比如n为10100，先检查最右边第一位，使用00001检查，与运算，值为00000，则最后一位为0
         //第二位，使用00010，结果为00000，第二位也为0
         //第三位，使用00100，结果为00100，所以第三位为1，count+1
         //循环到最后一位截止
         
         int count = 0;
         unsigned int flag = 1;
         while(flag)
         {
             if(n & flag)
             {
                 count++;
             }
             flag = flag<<1;
         }
         return count;

     }
};
