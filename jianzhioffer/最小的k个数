class Solution {
public:
    vector<int> GetLeastNumbers_Solution(vector<int> input, int k) {
        vector<int> res;
        if(k > input.size())    return res;
        int low = 0;
        int high = input.size()-1;
        //使用快排的partition函数，每次分割，直到分割点的索引正好为k-1
        int index = Partition(input, low, high);
        
        //然后二分法，如果获得索引大于k-1，那么high=index
        //如果获得的索引小于k-1，那么low=index
        while(index != k-1)
        {
            if(index > k-1)
            {
                int high = index - 1;
                index = Partition(input, low, high);
            }
            else
            {
                int low = index + 1;
                index = Partition(input, low, high);
            }
        }
        
        //最终index的值等于k-1的值
        for(int i=0;i<k;i++)
        {
            res[i] = input[i];
        }
        return res;
    }

    int Partition(vector<int> &input, int low, int high)
    {
        int pivot = input[high];
        
        int i = low;//指向小于pivot的最后一个点的后一位，也是最终pivot的位置
        
        for(int j=low;j<high;j++)
        {
            if(input[j] < pivot)
            {
                //把小于pivot的值放到前边，与i位置交换元素
                //同时i的位置+1
                int temp = input[j];
                input[j] = input[i];
                input[i] = temp;
                i++;
            }
        }
        //执行完以后，i位置之前的值都小于pivot
        //交换i和pivot的元素
        input[high] = input[i];
        input[i] = pivot;
        return i;
    }
};
